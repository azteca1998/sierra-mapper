type u32 = u32 [storable: true, drop: true, dup: true, zero_sized: false];
type sample::sample::MyStruct = Struct<ut@sample::sample::MyStruct, u32, u32> [storable: true, drop: true, dup: true, zero_sized: false];
type Box<Unit> = Box<Unit> [storable: true, drop: true, dup: true, zero_sized: false];
type sample::sample::MyEnum = Enum<ut@sample::sample::MyEnum, u32, u32> [storable: true, drop: true, dup: true, zero_sized: false];
type Tuple<sample::sample::MyStruct, sample::sample::MyEnum> = Struct<ut@Tuple, sample::sample::MyStruct, sample::sample::MyEnum> [storable: true, drop: true, dup: true, zero_sized: false];
type Unit = Struct<ut@Tuple> [storable: true, drop: true, dup: true, zero_sized: true];

libfunc struct_construct<Tuple<sample::sample::MyStruct, sample::sample::MyEnum>> = struct_construct<Tuple<sample::sample::MyStruct, sample::sample::MyEnum>>;
libfunc store_temp<Tuple<sample::sample::MyStruct, sample::sample::MyEnum>> = store_temp<Tuple<sample::sample::MyStruct, sample::sample::MyEnum>>;
libfunc store_temp<Box<Unit>> = store_temp<Box<Unit>>;

struct_construct<Tuple<sample::sample::MyStruct, sample::sample::MyEnum>>([0], [1]) -> ([2]); // 0
store_temp<Tuple<sample::sample::MyStruct, sample::sample::MyEnum>>([2]) -> ([2]); // 1
return([2]); // 2
store_temp<Box<Unit>>([0]) -> ([0]); // 3
return([0]); // 4

sample::sample::main@0([0]: sample::sample::MyStruct, [1]: sample::sample::MyEnum) -> (Tuple<sample::sample::MyStruct, sample::sample::MyEnum>);
sample::sample::main2@3([0]: Box<Unit>) -> (Box<Unit>);

